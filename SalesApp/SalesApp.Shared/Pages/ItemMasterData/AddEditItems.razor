@page "/faqmasterdata/faq/{ItemCode}"
@inject DataService<ItemsModel> itemsDataService

<Dialog Show="@Visible" Width="100%" OnClose="CloseModal" Class="responsive-dialog">
    <Header>
        <div class="header-container">
            <h2>Item Details</h2>
        </div>
        <div class="action-buttons">
            <Sysinfocus.AspNetCore.Components.Button Class="primary" Icon="save" OnClick="SaveDetails" />
            <Sysinfocus.AspNetCore.Components.Button Class="danger" Icon="delete" OnClick="DeleteDetails" />
            <Sysinfocus.AspNetCore.Components.Button Class="close-button" Type="Sysinfocus.AspNetCore.Components.ButtonType.Icon" Icon="close" OnClick="CloseModal" />
        </div>
    </Header>

    <Content>
        <div class="content-container">
            <!-- General Details Section -->
            <section>
                <h3>General Details</h3>
                <Separator />
                <div class="container-fluid">
                    <div class="row">
                        @foreach (var field in GeneralFields)
                        {
                            <div class="col-12 col-md-3 mb-3">
                                <div class="form-group">
                                    <Label Text="@field.Label" for="@field.Label" Class="form-label"></Label>
                                    <Input Id="@field.Label" Type="text" TItem="string" Value="@field.Value" Placeholder="@($"Enter {field.Label}")" />
                                </div>
                            </div>
                        }
                    </div>
                </div>

            </section>

            <Separator style="margin: 20px 0;" />

            <!-- Stock Details Section -->
            <section>
                <h3>Stock Details</h3>
                <Separator />
                <SfAccordion style="margin-top:5px;">
                    <AccordionItems>
                        @if (groupedStock != null && groupedStock.Any())
                        {
                            @foreach (var group in groupedStock)
                            {
                                <Syncfusion.Blazor.Navigations.AccordionItem Header="@group.Key">
                                    <ContentTemplate>
                                        <div class="responsive-table-container">
                                            <Table class="table table-striped table-bordered">
                                                <TableHeader>
                                                    <tr>
                                                        <th>Warehouse Code</th>
                                                        <th>Warehouse Name</th>
                                                        <th class="text-end">On Hand Stock</th>
                                                    </tr>
                                                </TableHeader>
                                                <TableBody>
                                                    @foreach (var stock in group)
                                                    {
                                                        <tr>
                                                            <td>@stock.WhsCode</td>
                                                            <td>@stock.WHName</td>
                                                            <td class="text-end">@stock.OnHand</td>
                                                        </tr>
                                                    }
                                                </TableBody>
                                                <TableFooter>
                                                    <tr>
                                                        <th>Total</th>
                                                        <th></th>
                                                        <th class="text-end">@group.Sum(g => Convert.ToDouble(g.OnHand))</th>
                                                    </tr>
                                                </TableFooter>
                                            </Table>
                                        </div>

                                    </ContentTemplate>
                                </Syncfusion.Blazor.Navigations.AccordionItem>
                            }
                        }

                        @if (_ItemBooking != null && _ItemBooking.Any())
                        {
                            <Syncfusion.Blazor.Navigations.AccordionItem Header="Item Booking">
                                <ContentTemplate>

                                    <Table class="table table-striped table-bordered">
                                        <TableHeader>
                                            <tr>
                                                <th>SO #</th>
                                                <th>Card Code</th>
                                                <th>Card Name</th>
                                                <th class="text-end">Balance</th>
                                                <th class="text-end">Quantity</th>
                                                <th class="text-end">Location</th>
                                            </tr>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var booking in _ItemBooking)
                                            {
                                                <tr>
                                                    <td class="text-end">@booking.SONo</td>
                                                    <td>@booking.CardCode</td>
                                                    <td>@booking.CardName</td>
                                                    <td class="text-end">@booking.Balance</td>
                                                    <td class="text-end">@booking.Qty</td>
                                                    <td class="text-end">@booking.Location</td>
                                                </tr>
                                            }
                                        </TableBody>
                                        <TableFooter>
                                            <tr>
                                                <th>Total</th>
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <th class="text-end">@_ItemBooking.Sum(b => Convert.ToDouble(b.Qty))</th>
                                            </tr>
                                        </TableFooter>
                                    </Table>
                                </ContentTemplate>
                            </Syncfusion.Blazor.Navigations.AccordionItem>
                        }

                        @if (_BatchWiseItem != null && _BatchWiseItem.Any())
                        {
                            <Syncfusion.Blazor.Navigations.AccordionItem Header="Batch Wise Stock">
                                <ContentTemplate>
                                    <Table class="table table-striped table-bordered">
                                        <TableHeader>
                                            <tr>
                                                <th>Warehouse Code</th>
                                                <th>Batch #</th>
                                                <th class="text-end">Quantity</th>
                                            </tr>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var batch in _BatchWiseItem)
                                            {
                                                <tr>
                                                    <td>@batch.WH</td>
                                                    <td>@batch.BatchShade</td>
                                                    <td class="text-end">@batch.Qty</td>
                                                </tr>
                                            }
                                        </TableBody>
                                        <TableFooter>
                                            <tr>
                                                <th>Total</th>
                                                <th></th>
                                                <th class="text-end">@_BatchWiseItem.Sum(b => Convert.ToDouble(b.Qty))</th>
                                            </tr>
                                        </TableFooter>
                                    </Table>
                                </ContentTemplate>
                            </Syncfusion.Blazor.Navigations.AccordionItem>
                        }
                    </AccordionItems>
                </SfAccordion>
            </section>

            <Separator style="margin: 20px 0;" />

            <!-- Price Details Section -->
            <section>
                <h3>Price Details</h3>
                <Separator />
                <div class="container-fluid">
                    <div class="row">
                        @foreach (var field in PriceFields)
                        {
                            <div class="col-12 col-md-3 mb-3">
                                <div class="form-group">
                                    <Label Text="@field.Label" for="@field.Label" Class="form-label"></Label>
                                    <Input Id="@field.Label" Type="text" TItem="string" Value="@field.Value" Placeholder="@($"Enter {field.Label}")" />
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </section>
        </div>
    </Content>
    <Footer></Footer>
</Dialog>

<style>
    .responsive-dialog {
    height: 100%;
    display: flex;
    flex-direction: column;
    }

    .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    }

    .action-buttons {
    margin-left: auto;
    display: flex;
    gap: 10px;
    }

    .content-container {
    flex: 1;
    max-height: calc(100vh - 100px);
    overflow-y: auto;
    padding: 10px;
    }

    .form-label {
    font-weight: bold;
    margin-bottom: 5px;
    }

    section {
    margin-bottom: 20px;
    }

    h3 {
    margin-bottom: 10px;
    }

    Separator {
    margin: 20px 0;
    }

    .responsive-table-container {
    overflow-x: auto; /* Enables horizontal scrolling */
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
    }

    .table {
    min-width: 100%; /* Ensures the table takes full width */
    }
</style>



@code {
    [Parameter] public string ItemCode { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public bool Visible { get; set; }

    private bool showDetails = true;
    private bool isLoading = true;
    private List<FormField> GeneralFields=new ();
    private List<FormField> PriceFields=new();
    private List<WarehouseWiseStock> Stock = new();
    private List<ItemBooking> _ItemBooking = new();
    private List<BatchWiseItem> _BatchWiseItem = new();
    private ItemsModel itemDetails = new();
    private IEnumerable<IGrouping<string, WarehouseWiseStock>> groupedStock;


    private void CloseModal()
    {
        if(FormFactor.Web){
            NavigationManager.NavigateTo("/faqmasterdata/faqs");

        }
        else{
            NavigationManager.NavigateTo("/faqmasterdata/faqs-mobile");

        }
        Visible = false;
        showDetails = false;
        OnClose.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        Visible = true;
        isLoading = true;

        itemDetails = itemsDataService.Data.FirstOrDefault(x => x.ItemCode == ItemCode);

        if (appstate.IsLoggedIn)
        {
            var apiClient = RestService.For<IRestfulApi>(httpClienthelper.HttpClient);

            // Separate API calls
            var inStockResponse = await apiClient.InStock(new { Entity = new { ItemCode }, DBName = appstate.DatabaseName, UserName = appstate.Username });
            foreach (var item in inStockResponse.Entity)
            {
                item.BreakageType = nameof(apiClient.InStock);
                Stock.Add(item);
            }

            var displayWHResponse = await apiClient.DisplayWH(new { Entity = new { ItemCode }, DBName = appstate.DatabaseName, UserName = appstate.Username });
            foreach (var item in displayWHResponse.Entity)
            {
                item.BreakageType = nameof(apiClient.DisplayWH);
                Stock.Add(item);
            }

            var otherWHResponse = await apiClient.OtherWH(new { Entity = new { ItemCode }, DBName = appstate.DatabaseName, UserName = appstate.Username });
            foreach (var item in otherWHResponse.Entity)
            {
                item.BreakageType = nameof(apiClient.OtherWH);
                Stock.Add(item);
            }

            var breakageWHStockResponse = await apiClient.BreakageWHStock(new { Entity = new { ItemCode }, DBName = appstate.DatabaseName, UserName = appstate.Username });
            foreach (var item in breakageWHStockResponse.Entity)
            {
                item.BreakageType = nameof(apiClient.BreakageWHStock);
                Stock.Add(item);
            }
            var BatchWiseItemStockResponse = await apiClient.BatchWiseItem(new { Entity = new { ItemCode }, DBName = appstate.DatabaseName, UserName = appstate.Username });
            _BatchWiseItem = BatchWiseItemStockResponse.Entity;
            var ItemBookingStockResponse = await apiClient.ItemBooking(new { Entity = new { ItemCode }, DBName = appstate.DatabaseName, UserName = appstate.Username });
            _ItemBooking = ItemBookingStockResponse.Entity;

            groupedStock = Stock.GroupBy(s => s.BreakageType);
        }

        GeneralFields = new List<FormField>
        {
            new("Item Code", itemDetails.ItemCode),
            new("Item Name", itemDetails.ItemName),
            new("Barcode", itemDetails.CodeBars),
            new("Bcd Code", itemDetails.BcdCode),
            new("Bcd Code 2", itemDetails.BcdCode2),
            new("Group", itemDetails.Grp),
            new("Status", itemDetails.Status)
        };

        PriceFields = new List<FormField>
        {
            new("Tag Price", itemDetails.Tag_Price),
            new("Sale Price", itemDetails.SalePrice),
            new("DIS LFT", itemDetails.DIS_LFT),
            new("DIS LHR 291 MB", itemDetails.DIS_LHR_291_MB),
            new("DIS CLGR", itemDetails.DIS_CLGR),
            new("DIS GUJ", itemDetails.DIS_GUJ),
            new("DIS ISB", itemDetails.DIS_ISB),
            new("DIS KHI", itemDetails.DIS_KHI),
            new("DIS LHR", itemDetails.DIS_LHR),
            new("DIS MON 58MB", itemDetails.DIS_MON_58MB)
        };

        isLoading = false;
    }

    private async Task NavigateBack()
    {
        showDetails = false;
        NavigationManager.NavigateTo("/faqmasterdata/faqs" + (FormFactor.Web ? "" : "-mobile"));
    }

    private async Task SaveDetails()
    {
        if (GeneralFields.Concat(PriceFields).Any(f => string.IsNullOrWhiteSpace(f.Value)))
        {
            ToastService.ShowToast("Error", "All fields are required.", "e-toast-danger");
            return;
        }

        ToastService.ShowToast("Success", "Details saved successfully.", "e-toast-success");
    }

    private async Task DeleteDetails()
    {
        ToastService.ShowToast("Success", "Item deleted successfully.", "e-toast-danger");
    }


    private record FormField(string Label, string Value);
}
