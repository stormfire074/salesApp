@page "/faqmasterdata/faqs-mobile"
@inject DataService<APIs.DTOs.ItemsModel> itemDataService


<section class="mobile-grid">
    <div class="flex-col">

        @if (pagedData is not null)
        {
            <div style="padding:10px;">
                <h2 style="margin-top: 5%; text-align: center;">
                    Items Stock Data
                </h2>

                <div style="margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
                    <Input type="text" placeholder="Search..." @bind-Value="@searchQuery" Class="input-search" />
                    <Button Class="primary btn-search" OnClick="ApplySearch">
                        <Icon Name="search" Size="18px" Color="white" />
                    </Button>
                </div>

                <div class="items-grid">
                    @foreach (var item in pagedData)
                    {
                        <div class="item-card">
                            <div class="flex ai-c">
                                <Checkbox Checked="@item.Selected" OnClick="@(() => HandleSelect(item))" />
                                <Icon Name="edit" Tooltip="Edit" Size="18px" Color="royalblue" OnClick="() => OpenModal(item.ItemCode)" />
                            </div>
                            <p><strong>ItemCode:</strong> @item.ItemCode</p>
                            <p><strong>ItemName:</strong> @item.ItemName</p>
                            <p><strong>CodeBars:</strong> @item.CodeBars</p>
                            <p><strong>SalePrice:</strong> @item.SalePrice</p>
                        </div>
                    }
                </div>

                <div style="padding:10px;">
                    <Pagination State="@paging" OnPageChange="HandlePaging" ActiveType="Sysinfocus.AspNetCore.Components.ButtonType.Primary" ShowFirstLast PreviousText="" NextText="" />
                </div>
            </div>
            @if (!string.IsNullOrEmpty(selectedItemCode))
            {
                <AddEditItems ItemCode="@selectedItemCode" OnClose="CloseModal" Visible="isModalOpen" />

            }
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</section>

<style>
    .mobile-grid {
        padding: 10px;
    }

    .input-search {
        width: 80%;
        margin-right: 10px;
        padding: 8px;
        font-size: 16px;
    }

    .btn-search {
        padding: 10px 20px;
    }

    .items-grid {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .item-card {
        background: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .item-card p {
        margin: 0;
        font-size: 14px;
    }

    @@media (min-width: 768px) {
        .items-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
        }
    }
</style>
@code {
    private List<ItemsModel> data = new();
    private ItemsModel List_Items = new();

    private IEnumerable<ItemsModel>? pagedData;
    private bool isAllChecked;
    private SortModel _sortModel = new() { Header = "ItemCode", IsAscending = true };
    private PaginationState paging = new() { CurrentPage = 1, TotalRecords = 0, PageSize = 10 };
    private string searchQuery = string.Empty;
    private bool isModalOpen = false;
    private string selectedItemCode;

    private void OpenModal(string itemCode)
    {
        selectedItemCode = itemCode;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (appstate.IsLoggedIn)
            {
                var apiClient = RestService.For<IRestfulApi>(httpClienthelper.HttpClient);
                var response = await apiClient.ItemsList(new ListRequest<ItemsModel>() { DBName = appstate.DatabaseName, UserName = appstate.Username });

                if (response.Error == null)
                {
                    data = response.Entity ?? new List<ItemsModel>();
                    itemDataService.Data = data;
                    paging.TotalRecords = data.Count;
                    pagedData = data.Take(paging.PageSize);
                }
                else
                {
                    ToastService.ShowToast("Failure", "Unable to load FAQs", "e-toast-danger");
                }
            }
            else
            {
                ToastService.ShowToast("Unauthorized", "User is not logged in", "e-toast-warning");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Error", $"An error occurred: {ex.Message}", "e-toast-danger");
        }
    }

    private void ApplySearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            pagedData = data.Take(paging.PageSize);
        }
        else
        {
            var filteredData = data.Where(d =>
                (d.ItemCode?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (d.ItemName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (d.CodeBars?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)).ToList();

            paging.TotalRecords = filteredData.Count;
            pagedData = filteredData.Take(paging.PageSize);
        }
    }

    private void NavigateToEditPage(string itemcode)
    {
        NavigationManager.NavigateTo($"/faqmasterdata/faq/{itemcode.ToString()}");
    }

    private string SelectedRecordCount()
    {
        int count = data.Count(a => a.Selected);
        if (count == 0) return $"Showing {pagedData?.Count()} / {data?.Count()} records with none selected.";
        else if (count == 1) return $"Showing {pagedData?.Count()} / {data?.Count()} records with {count} selected.";
        return $"Showing {pagedData?.Count()} / {data?.Count()} records with {count} selected.";
    }

    private async Task HandleSelect(ItemsModel item)
    {
        item.Selected = !item.Selected;
        if (!item.Selected) isAllChecked = false;
        await InvokeAsync(StateHasChanged);
    }

    private void HandleSelectAll(bool status)
    {
        isAllChecked = status;
        data.ForEach(d => d.Selected = status);
    }

    private async Task HandleDelete(ItemsModel dataItem)
    {
        data.Remove(dataItem);
        await InvokeAsync(StateHasChanged);
    }

    private void HandleSorting(SortModel sortModel)
    {
        if (data is null) return;

        data = (sortModel.Header.ToLower(), sortModel.IsAscending) switch
        {
            ("itemCode", true) => data.OrderBy(a => a.ItemCode).ToList(),
            ("itemCode", false) => data.OrderByDescending(a => a.ItemCode).ToList(),
            ("itemName", true) => data.OrderBy(a => a.ItemName).ToList(),
            ("itemName", false) => data.OrderByDescending(a => a.ItemName).ToList(),
            (_, _) => data
        };

        paging.CurrentPage = 1;
        HandlePaging();
    }

    private void HandlePaging()
    {
        var skip = (paging.CurrentPage - 1) * paging.PageSize;
        pagedData = data.Skip(skip).Take(paging.PageSize);
        var test = pagedData.Where(x => string.IsNullOrEmpty(x.CodeBars) || string.IsNullOrEmpty(x.SalePrice)).ToList();
    }
}

