@page "/faqmasterdata/faq/{Id}"

<div style="padding:20px">
    <Dialog Show="@showDetails" Width="100%" OnClose="NavigateBack">
        <Header>
            <div style="width: 100%; display: flex; justify-content: space-between; align-items: center;">
                <!-- Close button on the right -->
                <div>
                    <Button Class="" Type="Sysinfocus.AspNetCore.Components.ButtonType.Icon" Icon="close" OnClick="NavigateBack" />
                </div>
            </div>
        </Header>

        <Content>
            <section class="flex-col">
                <h2>FAQ Details</h2>
                <CascadingValue Value="@errors">
                    <div class="flex-col">
                        <Input Label="ID" Info="This is the unique identifier." Type="text" TItem="string" Placeholder="ID" Value="@currentFaq.Id.ToString()" Disabled="true"
                               Error="ID" />
                    </div>
                    <div class="flex-col">
                        <Textarea Label="Question" Info="Enter the question for the FAQ." Placeholder="Type the question here..."
                                  @bind-Text="currentFaq.Question" Error="Question" />
                    </div>
                    <div class="flex-col">
                        <label class="form-label">Answer</label>
                        <SfRichTextEditor @ref="EditorRef" ID="RT_Editor" Placeholder="Type your answer here..."
                                          @bind-Value="currentFaq.Answer" ShowCharCount="true" AutoSaveOnIdle="true" EnableTabKey="true" EnableXhtml="true">
                            <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                        </SfRichTextEditor>
                    </div>
                    <div class="flex-col">
                        <Switch Label="Status" Checked="@currentFaq.IsActive" OnClick="OnStatusChanged" />
                    </div>
                    <div style="display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px;">
                        <Button Class="primary" Text="Save" OnClick="SaveDetails" />
                        <Button Class="danger" Text="Delete" OnClick="DeleteDetails" />
                    </div>
                </CascadingValue>

                @if (errors?.Count > 0)
                {
                    <ul>
                        @foreach (var error in errors)
                        {
                            <li>@error.Value</li>
                        }
                    </ul>
                }
            </section>
        </Content>
        <Footer></Footer>
    </Dialog>
</div>

<style>
    .sbc-dialog-alert {
        height: 100% !important;
        width: 100% !important;
    }
</style>

@code {
    bool showDetails = true;
    VW_Faq currentFaq = new();
    SfRichTextEditor EditorRef;
    [Parameter]
    public string Id { get; set; }
    private List<ToolbarItemModel> Tools = new()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Video },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen }
    };
    Dictionary<string, string>? errors;

    protected override async Task OnParametersSetAsync()
    {
        if (appstate.IsLoggedIn)
        {
            // var apiClient = RestService.For<IRestfulApi>(httpClienthelper.HttpClient);
            // var response = await apiClient.GetSingleFaq(Guid.Parse(Id));
            // APIs.DTOs.AddEditFaq data = new();
            // if (response?.Data?.Success == true)
            // {
            //     data = response.Data.Data;
            //     currentFaq = new VW_Faq
            //     {
            //         Id = Guid.Parse(Id),
            //         Question = data.Question,
            //         Answer = data.Answer,
            //         Status = data.Status
            //     };
            // }
            // else
            // {
            //     ToastService.ShowToast("Failure", "Unable to load FAQs", "e-toast-danger");
            // }
        }
    }

    private void OnStatusChanged(bool value)
    {
        currentFaq.IsActive = value;
        currentFaq.Status = value ? 1 : 0;
    }

    private async Task NavigateBack()
    {
        showDetails = false;
        NavigationManager.NavigateTo("/faqmasterdata/faqs");
    }

    private async Task SaveDetails()
    {
        errors = new Dictionary<string, string>();
        if (string.IsNullOrWhiteSpace(currentFaq.Question)) errors.TryAdd("Question", "Question is required.");
        if (string.IsNullOrWhiteSpace(currentFaq.Answer)) errors.TryAdd("Answer", "Answer is required.");

        if (errors?.Count > 0) return;

        ToastService.ShowToast("Success", "Details saved successfully.", "e-toast-success");
    }

    private async Task DeleteDetails()
    {
        ToastService.ShowToast("Success", "Details deleted successfully.", "e-toast-danger");
    }
}
