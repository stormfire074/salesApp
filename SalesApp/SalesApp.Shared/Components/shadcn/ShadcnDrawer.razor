@page "/shadcn"
@inject IFormFactor _formfactor
<!-- AppBar Section -->
<SfAppBar CssClass="custom-appbar" Mode="AppBarMode.Regular">
    <div class="navbar-content">
        <!-- Drawer Toggle Button -->
        <span class="menu-item" @onclick="ToggleDrawer">
            <i class="e-icons e-menu"></i>
        </span>

        @if (!FormFactor.Web)
        {
            <!-- Navigation Buttons -->
            <div class="nav-buttons">
                <button class="nav-button" @onclick="NavigateBackward" title="Backward">
                    <i class="fa fa-arrow-left"></i>
                </button>
                <button class="nav-button" @onclick="NavigateForward" title="Forward">
                    <i class="fa fa-arrow-right"></i>
                </button>
                <button class="nav-button" @onclick="RefreshPage" title="Refresh">
                    <i class="fa fa-sync"></i>
                </button>
            </div>
        }

        <!-- Logo -->
        <div class="navbar-logo">
            <LogoComponent Width="130" Height="60" CssClass="custom-logo" Color="white" />
        </div>
    </div>
</SfAppBar>

<!-- Drawer Section -->
<Drawer Show="@isDrawerOpen" OnClose="CloseDrawer">
    <div class="drawer-content">
        <!-- Drawer Header -->
        <div class="drawer-header">
            <LogoComponent Width="130" Height="60" CssClass="drawer-logo-image" Color="black" />
            <Button Icon="close" Type="Sysinfocus.AspNetCore.Components.ButtonType.Icon" Class="border rounded" OnClick="CloseDrawer" />
        </div>

        <!-- Sidebar Navigation Tree -->
        <div class="custom-treeview">
            <SfTreeView TValue="TreeData">
                <TreeViewFieldsSettings Id="Id"
                Text="Text"
                IconCss="IconCss"
                ParentID="Pid"
                HasChildren="HasChild"
                DataSource="@SidebarData">
                </TreeViewFieldsSettings>
                <TreeViewEvents TValue="TreeData" NodeSelected="OnTreeNodeSelected"></TreeViewEvents>
            </SfTreeView>
        </div>

        <!-- Sidebar Footer -->
        <div class="drawer-footer">
        </div>
    </div>
</Drawer>
<style>
    /* AppBar Styles */
    .custom-appbar {
    background-color: black !important;
    color: white !important;
    display: flex;
    align-items: center;
    justify-content: space-between;
    }

    .navbar-content {
    display: flex;
    align-items: center;
    padding: 10px;
    }

    .menu-item {
    font-size: 24px;
    cursor: pointer;
    margin-right: 10px;
    }

    .nav-buttons {
    display: flex;
    align-items: center;
    margin-right: auto;
    }

    .nav-button {
    background: none;
    border: none;
    cursor: pointer;
    margin: 0 5px;
    font-size: 20px;
    color: white;
    }

    .nav-button:hover {
    color: #ccc;
    }

    .navbar-logo {
    margin-left: auto;
    }

    /* Drawer Styles */
    .drawer-content {
    width: 100%;
    height: auto;
    padding: 15px;
    }

    .drawer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-direction: row;
    padding: 15px;
    border-bottom: 1px solid #ddd; /* Divider for header */
    }

    .custom-treeview {
    margin: 10px 0;
    font-size: 14px;
    padding: 0px;
    flex: 1;
    max-height: calc(60vh - 150px); /* Ensures content area height is restricted */
    overflow-y: auto; /* Enables scrolling when content exceeds max-height */
    }

    .drawer-footer {
    display: flex;
    justify-content: center;
    padding: 10px;
    border-top: 1px solid #ddd; /* Divider for footer */
    }
</style>

@code {
    private bool isDrawerOpen = false;
    private List<TreeData> SidebarData;
    protected override void OnInitialized() {

        SidebarData = sidebardata();
    }
    private List<TreeData> sidebardata()
    {
        return new List<TreeData>
        {
            new TreeData { Id = "1", Text = "Dashboard", IconCss = "fa fa-home", HasChild = true },
            new TreeData { Id = "1.1", Pid = "1", Text = "Payroll Dashboard", IconCss = "fa fa-calendar-alt text-success", Url = "/dashboard/payrolldashboard" },

            new TreeData { Id = "2", Text = "Payroll Management", IconCss = "fa fa-calendar-alt", HasChild = true },
            new TreeData { Id = "2.1", Pid = "2", Text = "Payroll Configuration", IconCss = "fa fa-cogs text-warning", HasChild = true },
            new TreeData { Id = "2.1.1", Pid = "2.1", Text = "Designations", IconCss = "fa fa-id-badge text-info" },
            new TreeData { Id = "2.1.2", Pid = "2.1", Text = "Departments", IconCss = "fa fa-building text-secondary" },
            new TreeData { Id = "2.1.3", Pid = "2.1", Text = "Allowances", IconCss = "fa fa-hand-holding-usd text-success" },
            new TreeData { Id = "2.1.4", Pid = "2.1", Text = "Deductions", IconCss = "fa fa-minus-circle text-danger" },
            new TreeData { Id = "2.1.5", Pid = "2.1", Text = "Bonus Policies", IconCss = "fa fa-gift text-warning" },
            new TreeData { Id = "2.1.6", Pid = "2.1", Text = "Leave Type", IconCss = "fa fa-calendar-alt text-primary" },
            new TreeData { Id = "2.1.7", Pid = "2.1", Text = "Shifts", IconCss = "fa fa-clock text-muted" },

            new TreeData { Id = "2.2", Pid = "2", Text = "Employee Management", IconCss = "fa fa-users text-primary", HasChild = true },
            new TreeData { Id = "2.2.1", Pid = "2.2", Text = "Employee Profiles", IconCss = "fa fa-user text-info" },
            new TreeData { Id = "2.2.2", Pid = "2.2", Text = "Salary Details", IconCss = "fa fa-money-bill text-success" },

            new TreeData { Id = "2.3", Pid = "2", Text = "Payroll Processing", IconCss = "fa fa-cogs text-warning", HasChild = true },
            new TreeData { Id = "2.3.1", Pid = "2.3", Text = "Salary Calculation", IconCss = "fa fa-calculator text-info" },
            new TreeData { Id = "2.3.2", Pid = "2.3", Text = "Deductions & Benefits", IconCss = "fa fa-minus text-danger" },
            new TreeData { Id = "2.3.3", Pid = "2.3", Text = "Payslip Generation", IconCss = "fa fa-file-invoice-dollar text-success" },

            new TreeData { Id = "2.4", Pid = "2", Text = "Tax Management", IconCss = "fa fa-balance-scale text-secondary", HasChild = true },
            new TreeData { Id = "2.4.1", Pid = "2.4", Text = "Tax Deductions", IconCss = "fa fa-percent text-danger" },
            new TreeData { Id = "2.4.2", Pid = "2.4", Text = "Compliance Reports", IconCss = "fa fa-file-alt text-muted" },

            new TreeData { Id = "2.5", Pid = "2", Text = "Payment", IconCss = "fa fa-credit-card text-primary", HasChild = true },
            new TreeData { Id = "2.5.1", Pid = "2.5", Text = "Bank Transfers", IconCss = "fa fa-university text-success" },
            new TreeData { Id = "2.5.2", Pid = "2.5", Text = "Payment History", IconCss = "fa fa-history text-info" },

            new TreeData { Id = "3", Text = "Item Master Data", IconCss = "fa fa-question", HasChild = true },
            new TreeData { Id = "3.1", Pid = "3", Text = "Items", IconCss = "fa fa-question-circle",useResponsiveForm=FormFactor.Web?false:true, Url = "/faqmasterdata/faqs"},
            new TreeData { Id = "3.2", Pid = "3", Text = "ItemsVertical", IconCss = "fa fa-question-circle", Url = "/faqmasterdata/faqs-vertial"},
            // new TreeData { Id = "3.4", Pid = "3", Text = "FAQsPage2", IconCss = "fa fa-question-circle"},


            new TreeData { Id = "4", Text = "Shadcn", IconCss = "fa fa-cogs" ,Url="/shadcn"},
            new TreeData { Id = "5", Text = "Settings", IconCss = "fa fa-cogs" },
            new TreeData { Id = "6", Text = "Logout", IconCss = "fa fa-sign-out-alt", Url = "/login" }

        };

    }

    private void OnTreeNodeSelected(NodeSelectEventArgs args)
    {
        var test= FormFactor.Web;
        var selectedItem = SidebarData.FirstOrDefault(item => item.Text == args.NodeData.Text);
        if (selectedItem != null && !string.IsNullOrEmpty(selectedItem.Url))
        {
            NavigationManager.NavigateTo(selectedItem.Url);
        }
    }

    private void ToggleDrawer() => isDrawerOpen = !isDrawerOpen;

    private void CloseDrawer() => isDrawerOpen = false;

    private void NavigateBackward() => JSRuntime.InvokeVoidAsync("history.back");

    private void NavigateForward() => JSRuntime.InvokeVoidAsync("history.forward");

    private void RefreshPage() => JSRuntime.InvokeVoidAsync("location.reload");

    public class TreeData
    {
        public string Id { get; set; }
        public string Pid { get; set; }
        public string Text { get; set; }
        public string IconCss { get; set; }
        public bool HasChild { get; set; }
        public bool useResponsiveForm { get; set; }

        private string _url;
        public string Url
        {
            get
            {
                if (useResponsiveForm && !string.IsNullOrEmpty(_url) && !_url.EndsWith("-mobile"))
                {
                    return $"{_url}-mobile";
                }
                return _url;
            }
            set
            {
                _url = value;
            }
        }
    }

}
