@typeparam TItem
@using System.Linq.Expressions

<section class="flex-col">
    <h2>Data Table</h2>
    <div class="flex-col">
        @if (PagedData is not null)
        {
            <div style="padding:10px;">
                <DataTable Items="@PagedData" TItem="TItem" Height="calc(100vh - 190px)" ShowVerticalBorder ShowSelectAll OnSelectAll="HandleSelectAll">
                    <DataColumns>
                        <!-- Select Checkbox Column -->
                        <DataTableColumn Header="Select">
                            <Template>
                                @if (context is ISelectable selectable)
                                {
                                    <Checkbox Checked="@selectable.Selected" OnClick="@(() => HandleSelect(selectable))" />
                                }
                            </Template>
                        </DataTableColumn>

                        <!-- Actions Column -->
                        <DataTableColumn Header="Actions">
                            <Template>
                                <div class="flex ai-c">
                                    <Icon Name="delete" Tooltip="Delete" Size="18px" Color="red" OnClick="() => OnDelete(context)" />
                                    <Icon Name="edit" Tooltip="Edit" Size="18px" Color="royalblue" OnClick="() => OnEdit(context)" />
                                </div>
                            </Template>
                        </DataTableColumn>

                        <!-- Data Columns -->
                        @foreach (var column in Columns)
                        {
                            <DataTableColumn Header="@column.Header">
                                <Template>
                                    @if (column.Template != null)
                                    {
                                        @column.Template(context)
                                    }
                                    else
                                    {
                                        @GetPropertyValue(context, column.Property)
                                    }
                                </Template>
                            </DataTableColumn>
                        }
                    </DataColumns>
                </DataTable>

                <!-- Pagination -->
                <div class="desktop">
                    <div class="flex jcsb aic">
                        <p class="muted">@SelectedRecordCount()</p>
                        <Pagination State="@Paging" OnPageChange="HandlePaging" ActiveType="Sysinfocus.AspNetCore.Components.ButtonType.Primary" ShowFirstLast PreviousText="" NextText="" />
                    </div>
                </div>

                <div class="mobile">
                    <div class="flex-col aic">
                        <p class="muted">@SelectedRecordCount()</p>
                        <Pagination State="@Paging" OnPageChange="HandlePaging" ActiveType="Sysinfocus.AspNetCore.Components.ButtonType.Primary" ShowFirstLast PreviousText="" NextText="" />
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</section>

@code {
    [Parameter] public List<TItem> Data { get; set; } = new();
    [Parameter] public List<DataTableColumnDefinition<TItem>> Columns { get; set; } = new();
    [Parameter] public Func<TItem, Task> OnDelete { get; set; } = _ => Task.CompletedTask;
    [Parameter] public Func<TItem, Task> OnEdit { get; set; } = _ => Task.CompletedTask;

    private IEnumerable<TItem>? PagedData;
    private PaginationState Paging = new() { CurrentPage = 1, TotalRecords = 0, PageSize = 5 };

    protected override void OnParametersSet()
    {
        if (Data is not null)
        {
            Paging.TotalRecords = Data.Count;
            PagedData = Data.Take(Paging.PageSize);
        }
    }

    private string SelectedRecordCount()
    {
        int count = Data.OfType<ISelectable>().Count(item => item.Selected);
        return $"Showing {PagedData?.Count()} / {Data.Count} records with {count} selected.";
    }

    private void HandleSelect(ISelectable item)
    {
        item.Selected = !item.Selected;
        InvokeAsync(StateHasChanged);
    }

    private void HandleSelectAll(bool status)
    {
        foreach (var item in Data.OfType<ISelectable>())
        {
            item.Selected = status;
        }
        InvokeAsync(StateHasChanged);
    }

    private void HandlePaging()
    {
        var skip = (Paging.CurrentPage - 1) * Paging.PageSize;
        PagedData = Data.Skip(skip).Take(Paging.PageSize);
    }

    private object? GetPropertyValue(TItem item, Expression<Func<TItem, object>> property)
    {
        var compiled = property.Compile();
        return compiled(item);
    }
   
    


}
